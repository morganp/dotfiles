#!/usr/bin/env ruby
## Setting up files for a new matlab function or package
## $ make_matlab_lib some_new_project 
##
## This could be cleaner split into multiple files and separate templates
## But a single file in the your bin directory is easier to manage
##
##Copyright (c) 2013, Morgan Prior
## All rights reserved.
## 
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions are met:
##     * Redistributions of source code must retain the above copyright
##       notice, this list of conditions and the following disclaimer.
##     * Redistributions in binary form must reproduce the above copyright
##       notice, this list of conditions and the following disclaimer in the
##       documentation and/or other materials provided with the distribution.
##     * Neither the name of the organization nor the
##       names of its contributors may be used to endorse or promote products
##       derived from this software without specific prior written permission.
## 
## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
## ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
## WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
## DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
## DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
## (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
## LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
## ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
## (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
## SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

require 'fileutils'

if ARGV.size < 1
  puts "Usage $ make_matlab_lib new_project"
  exit
end

#Command line parse
project_name = (ARGV.first.to_s).dup

user_name = 'Morgan Prior'

#Add CamelCase method to singleton
module CaseFunctions
  def camelcase
    a = self.split /[-|\s| |_|\.]/ #Word Boundry or _
    a = a.map do |word|
      #[0..0] is ruby 1.8.7 safe [0] returns char code 1.8 and char in 1.9
      word[0..0].upcase + word[1..-1]
    end
      
    return a.join('')
  end
end
project_name.extend(CaseFunctions)

puts "Setting up new Project : " +  project_name.camelcase

## TODO
## Get some environment variables
## Users default Ruby version 1.8.7 or 1.9.2 (from RVM?)


#if folder does not contain project name make a new directory
current_folder = File.basename( Dir.getwd )
unless ((current_folder == project_name) or (current_folder == project_name.camelcase))
  if File.directory?( project_name )
    puts "Working in #{File.expand_path( project_name)}"
    Dir.chdir( project_name )

  elsif File.directory?( project_name.camelcase )
    puts "Working in #{File.expand_path( project_name.camelcase ) }"
    Dir.chdir( project_name.camelcase )
  
  else
    FileUtils.mkdir_p "matlab_#{project_name}"
    Dir.chdir         "matlab_#{project_name}" 
  end
end


## Template Files
## 
readme_contents = %{
#{project_name.camelcase}
#{'=' * project_name.camelcase.size}

EXAMPLES
========

}

## matches output from `version('-release')`
dot_version_contents = %{ 2012b 
}

top_level_function_contents = %{
function [ output_args ] = #{project_name}( input_args )
%#{ project_name.upcase } Summary of this function goes here
%   Detailed explanation goes here


end
}
top_level_package_contents = %{
function [ output_args ] = #{project_name}( input_args )
%#{ project_name.upcase } Summary of this function goes here
%   Detailed explanation goes here


end
}
top_level_test_contents = %{
  %% run_spec
  clear;
  %% Clear import list to test correct library
  clear import; 

  %% For Packages
  %    Add package to path (+function folder must be on path)
  addpath('../package/');

  %    Import functions 
  import padarray_pkg.* 

  %% For Functions
  %    Add function to path
  addpath('../function/');

  %% Test Vectors
  test = {};
  test(end+1).input = 0; test(end).expect = '0';
  test(end+1).input = 1; test(end).expect = '1';


  %% The tests
  error_count = 0;
  pass_count  = 0;

  for vector=1:size(test, 2)
    b           = #{project_name}(i test(vector).input );
    if (  ~isequal(b, test(vector).expect )  )
      disp('#{project_name}() Failed ')
      error_count = error_count + 1;
    else
      pass_count  = pass_count  + 1;
    end
  end

  %% Test Status Report
  if error_count > 0
    disp(['Test FAILED : ', num2str(pass_count), ' passes and ',num2str(error_count),' fails'])
  else
    disp(['Test Passed : ', num2str(pass_count), ' checks ran '])
  end

}

load_package_contents = %{
function load_package
%% Script to load functions 

%% Add all toplevel functions
addpath([fileparts( mfilename('fullpath') ), '/package']);

import #{project_name}.*

end
}

load_toolbox_contents = %{
function load_toolbox
%% Script to load functions 

%% Add all toplevel functions
addpath([fileparts( mfilename('fullpath') ), '/function']);

end
}


license_contents = %{
Copyright (c) #{Time.now.year}, #{user_name}
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the organization nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
}
# Create File if it does not exist and write the contents
def write( filename, contents )
  if File.exists? filename
    puts "#{filename} already exists"
  else
    puts "Creating #{filename}"
    ::File.open( filename, "w" ){ |f| f.write contents }
  end
end


## Create ./spec ./bin ./lib
FileUtils.mkdir_p 'test'
FileUtils.mkdir_p 'function' 
FileUtils.mkdir_p File.join( 'package', "+#{project_name}") 


write ".matlab-version",                                             dot_version_contents 
write "README.md",                                                   readme_contents 
write "load_toolbox.m",                                              load_toolbox_contents
write "load_package.m",                                              load_package_contents
write File.join('function', project_name + '.m'),                    top_level_function_contents 
write File.join('package', "+#{project_name}", project_name + '.m'), top_level_package_contents 
write File.join('test', 'run_' + project_name + '_test.m'),          top_level_test_contents
write "LICENSE",                                                     license_contents 


puts %{WARNING added the BSD License
If you do not want this applied to your project please remove ./LICENSE}

