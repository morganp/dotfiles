#!/usr/bin/env ruby
## Setting up files for a new Bundler/RVM Ruby project
## $ make_ruby_project some_new_project 
##
## This could be cleaner split into multiple files and seperate templates
## But a single file in the your bin directory is easier to manage
##
## A More mainstream version is part of bundler
## bundle gem some_new_project
##
##Copyright (c) 2011, Morgan Prior
## All rights reserved.
## 
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions are met:
##     * Redistributions of source code must retain the above copyright
##       notice, this list of conditions and the following disclaimer.
##     * Redistributions in binary form must reproduce the above copyright
##       notice, this list of conditions and the following disclaimer in the
##       documentation and/or other materials provided with the distribution.
##     * Neither the name of the organization nor the
##       names of its contributors may be used to endorse or promote products
##       derived from this software without specific prior written permission.
## 
## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
## ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
## WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
## DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
## DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
## (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
## LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
## ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
## (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
## SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

require 'fileutils'

if ARGV.size < 1
  puts "Usage $ make_ruby_project new_project"
  exit
end

#Command line parse
project_name = (ARGV.first.to_s).dup

user_name = 'Morgan Prior'

#Add CamelCase method to singleton
module CaseFunctions
  def camelcase
    a = self.split /[-|\s| |_|\.]/ #Word Boundry or _
    a = a.map do |word|
      #[0..0] is ruby 1.8.7 safe [0] returns char code 1.8 and char in 1.9
      word[0..0].upcase + word[1..-1]
    end
      
    return a.join('')
  end
end
project_name.extend(CaseFunctions)

puts "Setting up new Project : " +  project_name.camelcase

## TODO
## Get some enviroment variables
## Users default Ruby version 1.8.7 or 1.9.2 (from RVM?)


#if folder does not contain project name make a new directory
current_folder = File.basename( Dir.getwd )
unless ((current_folder == project_name) or (current_folder == project_name.camelcase))
  if File.directory?( project_name )
    puts "Working in #{File.expand_path( project_name)}"
    Dir.chdir( project_name )

  elsif File.directory?( project_name.camelcase )
    puts "Working in #{File.expand_path( project_name.camelcase ) }"
    Dir.chdir( project_name.camelcase )
  
  else
    FileUtils.mkdir_p project_name
    Dir.chdir( project_name )
  end
end


## Template Files
## 
readme_contents = %{
#{project_name.camelcase}
#{'=' * project_name.camelcase.size}

EXAMPLES
========

}

dot_rvmrc_contents = %{
  rvm_gemset_create_on_use_flag=1
  rvm 1.9.2@#{project_name}
}


gemfile_contents = %{
source :rubygems
#If this is a gem 
#Normal gems go in #{project_name}.gemspec
gemspec

#development and test not install on heroku deployment
group :development do

end

group :test do
  gem "rspec", :require => "spec"
end
}


rakefile_contents = %{
require 'rspec/core/rake_task'

file_list = FileList['spec/*_spec.rb']

RSpec::Core::RakeTask.new('spec') do |t|
  t.pattern = file_list
  t.rspec_opts = ["--colour", "--format progress"]
end

desc 'Default: run specs.'
task :default => 'spec'
}


top_level_contents = %{
module #{project_name.camelcase}
  VERSION = '0.0.1'
end

require '#{project_name}/#{project_name}'
}

module_base_contents = %{
module #{project_name.camelcase}
  class X
  end
end

}

spec_helper_contents = %{
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'rspec'
require '#{project_name}'
}

#Add empty test
first_spec_contents = %{
require 'spec_helper'

describe #{project_name} do
  it "should do something" do
    test = #{project_name}::Erm.new()
    test.contents.should == nil
  end
end

}


gemspec_contents = %{
# -*- encoding: utf-8 -*-
$:.push File.expand_path("../lib")
require '#{project_name}'

Gem::Specification.new do |s|
  s.name        = '#{project_name}'
  s.version     = #{project_name.camelcase}::VERSION
  s.platform    = Gem::Platform::RUBY
  s.authors     = ["#{user_name}"]
  s.email       = ["TODO: Write your email address"]
  s.homepage    = ""
  s.summary     = %q{#{project_name} TODO: Write a gem summary}
  s.description = %q{#{project_name} TODO: Write a gem description}

  s.files         = `git ls-files`.split("\n")
  s.test_files    = `git ls-files -- {test,spec,features}/*`.split("\n")
  s.executables   = `git ls-files -- bin/*`.split("\n").map{ |f| File.basename(f) }
  s.require_paths = ["lib"]

  #s.add_dependency('some_gem', '>= 1.0.0')
end
}

license_contents = %{
Copyright (c) #{Time.now.year}, #{user_name}
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the organization nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
}
# Create File if it does not exist and write the contents
def write( filename, contents )
  if File.exists? filename
    puts "#{filename} already exists"
  else
    puts "Creating #{filename}"
    ::File.open( filename, "w" ){ |f| f.write contents }
  end
end


## Create ./spec ./bin ./lib
FileUtils.mkdir_p "spec"
FileUtils.mkdir_p "bin"
FileUtils.mkdir_p File.join( 'lib', project_name) 


write ".rvmrc",                                             dot_rvmrc_contents 
write "Gemfile",                                            gemfile_contents 
write "Rakefile",                                           rakefile_contents 
write "README.md",                                          readme_contents 
write "#{project_name}.gemspec",                            gemspec_contents
write File.join('lib', project_name + '.rb'),               top_level_contents 
write File.join('lib', project_name, project_name + '.rb'), module_base_contents
write File.join('spec', 'spec_helper.rb'),                  spec_helper_contents
write File.join('spec', project_name + '_spec.rb'),         first_spec_contents
write "LICENSE",                                            license_contents 


puts %{WARNING added the BSD License
If you do not want this applied to your project please remove ./LICENSE}

