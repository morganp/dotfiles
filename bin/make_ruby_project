#!/usr/bin/env ruby

require 'FileUtils'

if ARGV.size < 1
  puts "Usage $ make_ruby_project new_project"
  exit
end

#Command line parse
project_name = (ARGV.first.to_s).dup

#Add CamelCase method to singleton
module CaseFunctions
  def camelcase
    a = self.split /[\b_]/ #Word Boundry or _
    a = a.map do |word|
      #[0..0] is ruby 1.8.7 safe [0] returns char code 1.8 and char in 1.9
      word[0..0].upcase + word[1..-1]
    end
      
    return a.join('')
  end
end
project_name.extend(CaseFunctions)

puts "Setting up new Project : " +  project_name.camelcase

## Get some enviroment variables
## Users default Ruby version 1.8.7 or 1.9.2 (from RVM?)


#if folder does not contain project name make a new directory
current_folder = File.basename( Dir.getwd )
unless ((current_folder == project_name) or (current_folder == project_name.camelcase))
  if File.directory?( project_name )
    puts "Working in #{File.expand_path( project_name)}"
    Dir.chdir( project_name )

  elsif File.directory?( project_name.camelcase )
    puts "Working in #{File.expand_path( project_name.camelcase ) }"
    Dir.chdir( project_name.camelcase )
  
  else
    FileUtils.mkdir_p project_name
    Dir.chdir( project_name )
  end
end



dot_rvmrc_contents = %{
  rvm_gemset_create_on_use_flag=1
  rvm 1.9.2@#{project_name}
}


gemfile_contents = %{
source :rubygems
#Normal gems go here

#development and test not install on heroku deployment
group :development do

end

group :test do
  gem "rspec", :require => "spec"
end
}


rakefile_contents = %{
require 'rspec/core/rake_task'

file_list = FileList['spec/*_spec.rb']

RSpec::Core::RakeTask.new('spec') do |t|
  t.pattern = file_list
  t.rspec_opts = ["--colour", "--format progress"]
end

desc 'Default: run specs.'
task :default => 'spec'
}


top_level_contents = %{
module #{project_name.camelcase}
  VERSION = '0.0.1'
end

require '#{project_name}/#{project_name}'
}

module_base_contents = %{
module #{project_name.camelcase}
  class X
  end
end

}

spec_helper_contents = %{
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'rspec'
require '#{project_name}'
}

#Add empty test
first_spec_contents = %{
require 'spec_helper'

describe #{project_name} do
  it "should do something" do
    test = #{project_name}::Erm.new()
    test.contents.should == nil
  end
end

}

# Create File if it does not exist and write the contents
def write( filename, contents)
  if File.exists? filename
    puts "#{filename} already exists"
  else
    puts "Creating #{filename}"
    ::File.open( filename, "w" ){ |f| f.write contents }
  end
end


FileUtils.mkdir_p "spec"
FileUtils.mkdir_p "bin"
FileUtils.mkdir_p File.join( 'lib', project_name) 

#TODO
#touch #{project_name}.gemspec
#touch README.md
#touch LICENSE

write ".rvmrc",                                             dot_rvmrc_contents 
write "Gemfile",                                            gemfile_contents 
write "Rakefile",                                           rakefile_contents 
write File.join('lib', project_name + '.rb'),               top_level_contents 
write File.join('lib', project_name, project_name + '.rb'), module_base_contents
write File.join('spec', 'spec_helper.rb'),                  spec_helper_contents
write File.join('spec', project_name + '_spec.rb'),         first_spec_contents

